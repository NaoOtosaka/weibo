<?php

namespace App\Models;

use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Illuminate\Support\Str;
use function foo\func;

class User extends Authenticatable
{
    use Notifiable;

    protected $table = 'users';
    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'name', 'email', 'password',
    ];

    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $hidden = [
        'password', 'remember_token',
    ];

    /**
     * The attributes that should be cast to native types.
     *
     * @var array
     */
    protected $casts = [
        'email_verified_at' => 'datetime',
    ];

    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
//        创建前生成令牌
        static::creating(function ($user){
            $user->activation_token = Str::random(10);
        });
    }

//    gravatar头像方法
    public function gravatar($size = '100'){
        $hash = md5(strtolower(trim($this->attributes['email'])));
        return "http://www.gravatar.com/avatar/$hash?=$size";
    }

//    QQ头像方法
    public function QQpic($size = '100'){
        $name = strstr($this->attributes['email'], '@', true);
        return "http://q1.qlogo.cn/g?b=qq&nk=$name&s=$size";
    }

    public function headPic($size = '100'){
        if(preg_match('|^[1-9]\d{4,12}@qq\.com$|i',$this->attributes['email'])){
            return $this->QQpic($size);
        }else{
            return $this->gravatar($size);
        }
    }

//    指明一个用户拥有多个微博
    public function statuses(){
        return $this->hasMany(Status::class);
    }

//    获取动态流
    public function feed(){
        return $this->statuses()
            ->orderBy('created_at', 'desc');
    }

//    获取粉丝列表
    public function followers(){
        return $this->belongsToMany(
            User::class, 'followers', 'user_id', 'follower_id'
        );
    }

//    获取用户关注列表
    public function followings(){
        return $this->belongsToMany(
            User::class, 'followers', 'follower_id', 'user_id'
        );
    }

//    关注方法
    public function follow($user_ids){
        if (!is_array($user_ids)){
            $user_ids = compact('user_ids');
        }
        $this->followings()->sync($user_ids, false);
    }
//    取消关注方法
    public function unfollow($user_ids){
        if (!is_array($user_ids)){
            $user_ids = compact('user_ids');
        }
        $this->followings()->detach($user_ids);
    }

//    检测是否关注
    public function isFollowing($user_id){
//        通过访问User类的followings属性直接获取到关注用户的集合
//        是Laravel Eloquent提供的动态属性属性功能
//        $user->followings返回Eloquent集合(返回数据集合)
//        $user->followings()返回数据库请求构建器(返回数据库查询语句)
//        contains()是Collection类的一个方法
        return $this->followings->contains($user_id);
//        等价于
//        return $this->followings()->get()->contains($user_id);
    }
}

